import org.apache.tools.ant.filters.*

apply plugin: 'groovy'

// Workaround for java.lang.OutOfMemoryError: Java heap space during compileGroovy phase
compileGroovy.groovyOptions.fork(memoryMaximumSize: '1024m')

apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'maven'

group = "edu.harvard.chs"
version = "0.0.1"

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'commons-io', name: 'commons-io', version: '1.4'
    compile group: 'log4j', name: 'log4j', version: '1.2.15', ext: 'jar'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.6'
    compile group: 'com.google.apis', name: 'google-api-services-oauth2', version: 'v1-rev79-1.19.0'
    compile group: 'com.google.apis', name: 'google-api-services-fusiontables', version: 'v1-rev53-1.19.0'
    compile group: 'com.google.http-client', name: 'google-http-client-jackson2', version: '1.19.0'
    compile group: 'com.google.oauth-client', name: 'google-oauth-client-jetty', version: '1.19.0'
    compile group: 'com.google.oauth-client', name: 'google-oauth-client-servlet', version: '1.19.0'
    compile group: 'com.google.api-client', name: 'google-api-client-appengine', version: '1.19.0'
    compile group: 'com.google.appengine', name: 'appengine-api-1.0-sdk', version: '1.9.10'
}

httpPort = 8988
stopPort = 9451
stopKey = 'foo'

// This filters resources which we can access from compiled groovy classes.
// See: http://mrhaki.blogspot.com/2010/11/gradle-goodness-add-filtering-to.html
// and http://forums.gradle.org/gradle/topics/sourcesetcontainer_all_removed_in_1_0m9
afterEvaluate {
  configure(allProcessResourcesTasks()) {
    filter(ReplaceTokens, tokens: ['administratorEmail': administratorEmail, 'authorizationTable': authorizationTable, 'capabilitiesUrl': capabilitiesUrl])
  }
}
 
def allProcessResourcesTasks() {
  sourceSets*.processResourcesTaskName.collect {
    tasks[it]
  }
}

task srcCopy(type: Copy) {
    from(file('src/main/webapp'))
    into('build/webapp/cite-collection-manager')
}

task srcZip(type: Zip, dependsOn: srcCopy) {
    classifier = 'sources'
    from(file('build/webapp'))
}

artifacts {
    archives srcZip
}

war {
    from "src/main/webapp"
    filter(ReplaceTokens, tokens: ['administratorEmail': administratorEmail, 'authorizationTable': authorizationTable, 'capabilitiesUrl': capabilitiesUrl, 'validTables': validTables])
}